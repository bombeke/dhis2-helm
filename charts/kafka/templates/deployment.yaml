{{- $replicaCount := int .Values.replicaCount }}
{{- if or (gt $replicaCount 0) .Values.autoscaling.enabled }}

apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}-connect
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: 
    {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: connector
    app.kubernetes.io/part-of: kafka
  {{- if .Values.commonAnnotations }}
  annotations: 
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels: 
      {{- include "common.labels.matchLabels" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 6 }}
      app.kubernetes.io/component: connector
      app.kubernetes.io/part-of: kafka
  template:
    metadata:
      labels: 
        {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 8 }}
        app.kubernetes.io/component: connector
        app.kubernetes.io/part-of: kafka
    spec:
      containers:
        - name: connect
          image: {{ include "kafka.image" . }}
          imagePullPolicy: {{ .Values.kafka.image.pullPolicy | quote }}
          env:
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" (or .Values.kafka.image.debug .Values.kafka.diagnosticMode.enabled) | quote }}
            - name: KAFKA_HEAP_OPTS
              value: {{ coalesce .Values.kafka.broker.heapOpts .Values.kafka.heapOpts | quote }}
            {{- if .Values.kafka.kraft.enabled }}
            - name: KAFKA_KRAFT_CLUSTER_ID
              valueFrom:
                secretKeyRef:
                  name: {{ default (printf "%s-kraft-cluster-id" (include "common.names.fullname" .)) .Values.kafka.kraft.existingClusterIdSecret }}
                  key: kraft-cluster-id
            {{- if .Values.kafka.broker.zookeeperMigrationMode }}
            - name: KAFKA_SKIP_KRAFT_STORAGE_INIT
              value: "true"
            {{- end }}
            {{- end }}
            {{- if and (include "kafka.saslEnabled" .) (or (regexFind "SCRAM" (upper .Values.kafka.sasl.enabledMechanisms)) (regexFind "SCRAM" (upper .Values.kafka.sasl.controllerMechanism)) (regexFind "SCRAM" (upper .Values.kafka.sasl.interBrokerMechanism))) }}
            {{- if or .Values.kafka.zookeeper.enabled .Values.kafka.externalZookeeper.servers }}
            - name: KAFKA_ZOOKEEPER_BOOTSTRAP_SCRAM_USERS
              value: "true"
            {{- else }}
            - name: KAFKA_KRAFT_BOOTSTRAP_SCRAM_USERS
              value: "true"
            {{- end }}
            {{- if and (include "kafka.client.saslEnabled" . ) .Values.kafka.sasl.client.users (include "kafka.saslUserPasswordsEnabled" .) }}
            - name: KAFKA_CLIENT_USERS
              value: {{ join "," .Values.kafka.sasl.client.users | quote }}
            - name: KAFKA_CLIENT_PASSWORDS
              valueFrom:
                secretKeyRef:
                  name: {{ include "kafka.saslSecretName" . }}
                  key: client-passwords
            {{- end }}
            {{- if regexFind "SASL" (upper .Values.kafka.listeners.interbroker.protocol) }}
            {{- if (include "kafka.saslUserPasswordsEnabled" .) }}
            - name: KAFKA_INTER_BROKER_USER
              value: {{ .Values.kafka.sasl.interbroker.user | quote }}
            - name: KAFKA_INTER_BROKER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "kafka.saslSecretName" . }}
                  key: inter-broker-password
            {{- end }}
            {{- if (include "kafka.saslClientSecretsEnabled" .) }}
            - name: KAFKA_INTER_BROKER_CLIENT_ID
              value: {{ .Values.kafka.sasl.interbroker.clientId | quote }}
            - name: KAFKA_INTER_BROKER_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "kafka.saslSecretName" . }}
                  key: inter-broker-client-secret
            {{- end }}
            {{- end }}
            {{- if and .Values.kafka.kraft.enabled (regexFind "SASL" (upper .Values.kafka.listeners.controller.protocol)) }}
            {{- if (include "kafka.saslUserPasswordsEnabled" .) }}
            - name: KAFKA_CONTROLLER_USER
              value: {{ .Values.kafka.sasl.controller.user | quote }}
            - name: KAFKA_CONTROLLER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "kafka.saslSecretName" . }}
                  key: controller-password
            {{- end }}
            {{- if (include "kafka.saslClientSecretsEnabled" .) }}
            - name: KAFKA_CONTROLLER_CLIENT_ID
              value: {{ .Values.kafka.sasl.controller.clientId | quote }}
            - name: KAFKA_CONTROLLER_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "kafka.saslSecretName" . }}
                  key: controller-client-secret
            {{- end }}
            {{- end }}
            {{- end }}
            {{- if .Values.kafka.metrics.jmx.enabled }}
            - name: JMX_PORT
              value: {{ .Values.kafka.metrics.jmx.kafkaJmxPort | quote }}
            {{- end }}
            {{- if .Values.kafka.broker.extraEnvVars }}
            {{- include "common.tplvalues.render" ( dict "value" .Values.kafka.broker.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
            {{- if .Values.kafka.extraEnvVars }}
            {{- include "common.tplvalues.render" ( dict "value" .Values.kafka.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          {{- if or .Values.kafka.broker.extraEnvVarsCM .Values.kafka.extraEnvVarsCM .Values.kafka.broker.extraEnvVarsSecret .Values.kafka.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.kafka.broker.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.kafka.broker.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.kafka.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.kafka.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.kafka.broker.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.kafka.broker.extraEnvVarsSecret "context" $) }}
            {{- end }}
            {{- if .Values.kafka.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.kafka.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- end }}
          ports:
            - name: connector
              containerPort: 8083
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/kafka/config
      volumes:
        - name: configuration
          configMap:
            name: {{ include "common.names.fullname" . }}-connect
{{- end }}
